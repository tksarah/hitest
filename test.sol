// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;

import "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol";
import "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol";
import "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol";
import "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol";
import "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721BurnableUpgradeable.sol";
import "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721PausableUpgradeable.sol";
import "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol";
import "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol";
import "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol";
import "@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol";
import "@openzeppelin/contracts-upgradeable/utils/CountersUpgradeable.sol";

/**
 * @dev {ERC721} token, including:
 *
 *  - ability for holders to burn (destroy) their tokens
 *  - a minter role that allows for token minting (creation)
 *  - a pauser role that allows to stop all token transfers
 *  - token ID and URI autogeneration
 *
 * This contract uses {AccessControl} to lock permissioned functions using the
 * different roles - head to its documentation for details.
 *
 * The account that deploys the contract will be granted the minter and pauser
 * roles, as well as the default admin role, which will let it grant both minter
 * and pauser roles to other accounts.
 */
contract ChildrenNft is
    Initializable,
    ContextUpgradeable,
    AccessControlEnumerableUpgradeable,
    ERC721Upgradeable,
    ERC721EnumerableUpgradeable,
    ERC721BurnableUpgradeable,
    ERC721PausableUpgradeable,
    UUPSUpgradeable
{
    using AddressUpgradeable for address;
    using StringsUpgradeable for uint256;
    using SafeMathUpgradeable for uint256;
    using CountersUpgradeable for CountersUpgradeable.Counter;
    
    event Mint(address indexed to, uint256 tokenId);
    event Burn(uint256 indexed tokenId);
    event TransferNatives(address[] receivers, uint value);

    bytes32 public constant PAUSER_ROLE = keccak256("PAUSER_ROLE");

    CountersUpgradeable.Counter private _tokenIdTracker;

    string private _baseTokenURI;

    uint256 public nftPrice;
    uint256 public maxSupply;

    constructor(
        string memory name,
        string memory symbol,
        string memory baseTokenURI,
        uint price,
        uint supply) {
        // _disableInitializers();
        initialize(name, symbol, baseTokenURI, price, supply);
    }

    /**
     *
     * Token URIs will be autogenerated based on `baseURI` and their token IDs.
     * See {ERC721-tokenURI}.
     */
    function initialize(
        string memory name,
        string memory symbol,
        string memory baseTokenURI,
        uint price,
        uint supply
    ) public initializer {
        require(price > 0 , "price invalid");
        __ChildrenNft_init(name, symbol, baseTokenURI);
        nftPrice = price;
        maxSupply = supply;
        _tokenIdTracker.increment();//token index start is 1
    }

    function __ChildrenNft_init(
        string memory name,
        string memory symbol,
        string memory baseTokenURI
    ) internal initializer {
        __Context_init_unchained();
        __ERC165_init_unchained();
        __AccessControl_init_unchained();
        __AccessControlEnumerable_init_unchained();
        __ERC721_init_unchained(name, symbol);
        __ERC721Enumerable_init_unchained();
        __ERC721Burnable_init_unchained();
        __Pausable_init_unchained();
        __ERC721Pausable_init_unchained();
        __ChildrenNft_init_unchained(baseTokenURI);
        __UUPSUpgradeable_init();
    }

    function __ChildrenNft_init_unchained(
        string memory baseTokenURI
    ) internal initializer {
        _baseTokenURI = baseTokenURI;
        _setupRole(DEFAULT_ADMIN_ROLE, _msgSender());
        _setupRole(PAUSER_ROLE, _msgSender());
    }

    modifier adminGuard() {
        require(
            hasRole(DEFAULT_ADMIN_ROLE, _msgSender()),
            "ChildrenNft: must have admin role"
        );
        _;
    }

    modifier pauserGuard() {
        require(
            hasRole(PAUSER_ROLE, _msgSender()),
            "ChildrenNft: must have pauser role"
        );
        _;   
    }

    function transferAdmin(address _to) public adminGuard {
        _setupRole(DEFAULT_ADMIN_ROLE, _to);
        _setupRole(PAUSER_ROLE, _to);
    }

    function redeemNative(address _to, uint value) public adminGuard {
        payable(_to).transfer(value);
    }

    function transferNatives(address[] memory receivers, uint value) payable external {
        require(receivers.length > 0, "Invalid receivers");
        require(value > 0, "Invalid value");
        require(msg.value >= receivers.length*value, "Not enough token");
        
        for (uint256 i = 0; i < receivers.length; i++) {
            payable(receivers[i]).transfer(value);
        }

        emit TransferNatives(receivers, value);
    }

    function _baseURI() internal view virtual override returns (string memory) {
        return _baseTokenURI;
    }

    function getCurrentTokenId() public view returns (uint256) {
        return _tokenIdTracker.current();
    }

    function getOwnedToken(address owner)
        public
        view
        returns (uint[] memory)
    {
        uint256 balance = super.balanceOf(owner);
        uint[] memory result = new uint[](balance);
        for (uint256 i = 0; i < balance; i++) {
            uint256 tokenId = tokenOfOwnerByIndex(owner, i);
            result[i] = tokenId;
        }
        return result;
    }

    /**
     * @dev See {IERC721Metadata-tokenURI}.
     */
    function tokenURI(uint256 _tokenId) public view virtual override returns (string memory) {
        require(_exists(_tokenId), "ChildrenNft: URI query for nonexistent token");

        string memory baseURI = _baseURI();
        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, _tokenId.toString())) : "";
    }

    function updateURI(string memory _uri) public adminGuard {
        _baseTokenURI = _uri;
    }

    function setPrice(uint _price) public adminGuard {
        nftPrice = _price;
    }

    function setMaxSupply(uint _supply) public adminGuard {
        maxSupply = _supply;
    }

    /**
     * @dev Creates a new token for `to`. Its token ID will be automatically
     * assigned (and available on the emitted {IERC721-Transfer} event), and the token
     * URI autogenerated based on the base URI passed at construction.
     *
     * See {ERC721-_mint}.
     *
     */
    function mint(
        address _to
    ) payable external virtual {     
        require(msg.value == nftPrice, "Nft price invalid");
        uint currentId = _tokenIdTracker.current();
        require(currentId <= maxSupply, "Max supply exceed.");
        _mint(_to, currentId); 
        emit Mint(_to, currentId); 
        _tokenIdTracker.increment();
    }

    function burn(uint256 _tokenId) public override {
        super.burn(_tokenId);
        emit Burn(_tokenId);
    }


    /**
     * @dev Pauses all token transfers.
     *
     * See {ERC721Pausable} and {Pausable-_pause}.
     *
     * Requirements:
     *
     * - the caller must have the `PAUSER_ROLE`.
     */
    function pause() public virtual pauserGuard {
        _pause();
    }

    /**
     * @dev Unpauses all token transfers.
     *
     * See {ERC721Pausable} and {Pausable-_unpause}.
     *
     * Requirements:
     *
     * - the caller must have the `PAUSER_ROLE`.
     */
    function unpause() public virtual pauserGuard {
        _unpause();
    }

    function _beforeTokenTransfer(
        address _from,
        address _to,
        uint256 _tokenId
    )
        internal
        virtual
        override(
            ERC721Upgradeable,
            ERC721EnumerableUpgradeable,
            ERC721PausableUpgradeable
        )
    {
        super._beforeTokenTransfer(_from, _to, _tokenId);
    }

    /**
     * @dev See {IERC165-supportsInterface}.
     */
    function supportsInterface(bytes4 _interfaceId)
        public
        view
        virtual
        override(
            AccessControlEnumerableUpgradeable,
            ERC721Upgradeable,
            ERC721EnumerableUpgradeable
        )
        returns (bool)
    {
        return super.supportsInterface(_interfaceId);
    }
    
    function _authorizeUpgrade(address newImplementation)
        internal
        override
        adminGuard
    {
        // Do something here.
    }
    
    uint256[45] private __gap;
}

